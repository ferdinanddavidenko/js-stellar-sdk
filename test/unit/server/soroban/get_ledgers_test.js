const { Server, AxiosClient } = StellarSdk.rpc;
const { xdr } = StellarSdk;
describe("Server#getLedgers", function () {
  beforeEach(function () {
    this.server = new Server(serverUrl);
    this.axiosMock = sinon.mock(AxiosClient);
  });

  afterEach(function () {
    this.axiosMock.verify();
    this.axiosMock.restore();
  });

  const mockLedgerResult = {
    ledgers: [
      {
        hash: "acf84ff3de44330bb1b04de163ff5a481ca2196c91dca2702c0699e2d2d421c2",
        sequence: 848581,
        ledgerCloseTime: "1759439852",
        headerXdr:
          "rPhP895EMwuxsE3hY/9aSByiGWyR3KJwLAaZ4tLUIcIAAAAX/VImpJvDxgAgKrIAJKUQx9X4NMswxtpAOSI7z9yUDcn7W3zPbRRU213oAgtjF4w4Gr9ocuVNkgjjyY8NZHVpUgAAAABo3uvsAAAAAAAAAAEAAAAAqCTNGLyddQZNKZpbW6ykO8OqLzJpOBU9jC+btctt8DMAAABAqYk3rl8NH4CFB8ekkDKdJDHjabXPOJUdc299R67Ls6k1xZSWQv7VslnYUnIbYZe3RhYdplwiS74GwEEHvWaWBhI45lbgpWLIVu5eL1gB0fBOT/OWjDzDTztQSw+ljSJ2R2PAttydrVzUhKfzOCDQjQlld+to/qZmh801SbpeKRoADPLFDeC2s6dkAAAAAAAuTtDbeQAAAAAAAAAAAAASJQAAAGQATEtAAAAAyBNDjM6eWlyP/jZeKneqYslsYyLLU2T4yrwfmkooKH9VK197igPthTrxQ9h100HkmyoFyDczhbv9yTGfxHZT7r2xByQFi58b6jub4t+rrmsIrf9qLrrstG70CnQh3uEdK3jfX/XfBYxAEzDm6pGn2/xshRwOT3D56ojadgOLJjaYAAAAAAAAAAA=",
        metadataXdr:
          "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",
      },
      {
        hash: "358bf03d93f929356447fae84ce6d009ef9055f7ad3a4a60df20e3f3c42b2945",
        sequence: 848582,
        ledgerCloseTime: "1759439857",
        headerXdr:
          "NYvwPZP5KTVkR/roTObQCe+QVfetOkpg3yDj88QrKUUAAAAXrPhP895EMwuxsE3hY/9aSByiGWyR3KJwLAaZ4tLUIcJZrivGZTYhEDvlnNfgCcK7k8prpXnaMR+iUXMzVDKsaQAAAABo3uvxAAAAAAAAAAEAAAAA1XJp2WJQ90ltB5vi6DUSNu//6NOcLga/q7FCHxf8ZxwAAABAqhwbu+rSqRC5zO2pvK7IPe0P4rTJK6fgWzK2oHmOSPU3PYcF4Oo/el0RiYNGh7Irio4zWcZUjRyolCV9KfeOA+R1NIGrt/53AwxiEbL/0IuCdN3kBF+x4lUYx8zt8EN69hnAtgHzGSoewRBZ5hRkVXZbXV29ReWLOWY4fgle7QkADPLGDeC2s6dkAAAAAAAuTtDcQQAAAAAAAAAAAAASJQAAAGQATEtAAAAAyBNDjM6eWlyP/jZeKneqYslsYyLLU2T4yrwfmkooKH9VK197igPthTrxQ9h100HkmyoFyDczhbv9yTGfxHZT7r2xByQFi58b6jub4t+rrmsIrf9qLrrstG70CnQh3uEdK3jfX/XfBYxAEzDm6pGn2/xshRwOT3D56ojadgOLJjaYAAAAAAAAAAA=",
        metadataXdr:
          "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",
      },
    ],
    latestLedger: 848592,
    latestLedgerCloseTime: 1759439907,
    oldestLedger: 727633,
    oldestLedgerCloseTime: 1758834415,
    cursor: "848592",
  };

  const expectedMockLedgerResult = {
    ledgers: mockLedgerResult.ledgers.map((ledger) => ({
      hash: ledger.hash,
      sequence: ledger.sequence,
      ledgerCloseTime: ledger.ledgerCloseTime,
      headerXdr: xdr.LedgerHeaderHistoryEntry.fromXDR(
        ledger.headerXdr,
        "base64",
      ),
      metadataXdr: xdr.LedgerCloseMeta.fromXDR(ledger.metadataXdr, "base64"),
    })),
    latestLedger: mockLedgerResult.latestLedger,
    latestLedgerCloseTime: mockLedgerResult.latestLedgerCloseTime,
    oldestLedger: mockLedgerResult.oldestLedger,
    oldestLedgerCloseTime: mockLedgerResult.oldestLedgerCloseTime,
    cursor: mockLedgerResult.cursor,
  };

  function mockGetLedgers(axiosMock, params, result) {
    axiosMock
      .expects("post")
      .withArgs(serverUrl, {
        jsonrpc: "2.0",
        id: 1,
        method: "getLedgers",
        params,
      })
      .returns(Promise.resolve({ data: { result } }));
  }

  it("requests the correct method with startLedger", function (done) {
    const params = {
      startLedger: 848581,
      pagination: { limit: 2 },
    };

    mockGetLedgers(this.axiosMock, params, mockLedgerResult);

    this.server
      .getLedgers({ startLedger: 848581, pagination: { limit: 2 } })
      .then(function (response) {
        expect(response).to.be.deep.equal(expectedMockLedgerResult);
        expect(response.ledgers).to.have.length(2);
        done();
      })
      .catch(function (err) {
        done(err);
      });
  });

  it("handles empty ledger list", function (done) {
    const emptyResult = {
      ledgers: [],
      latestLedger: 36379,
      latestLedgerCloseTime: 1734033188,
      oldestLedger: 29312,
      oldestLedgerCloseTime: 1733997822,
      cursor: null,
    };

    const params = {
      startLedger: 99999,
    };

    mockGetLedgers(this.axiosMock, params, emptyResult);

    this.server
      .getLedgers({ startLedger: 99999 })
      .then(function (response) {
        expect(response).to.be.deep.equal(emptyResult);
        expect(response.ledgers).to.have.length(0);
        done();
      })
      .catch(function (err) {
        done(err);
      });
  });

  it("validates ledger data structure", function (done) {
    const params = {
      startLedger: 848581,
      pagination: { limit: 1 },
    };

    const singleLedgerResult = {
      ...mockLedgerResult,
      ledgers: [mockLedgerResult.ledgers[0]],
    };

    mockGetLedgers(this.axiosMock, params, singleLedgerResult);

    this.server
      .getLedgers({ startLedger: 848581, pagination: { limit: 1 } })
      .then(function (response) {
        const ledger = response.ledgers[0];

        // Validate ledger structure
        expect(ledger).to.have.property("hash");
        expect(ledger).to.have.property("sequence");
        expect(ledger).to.have.property("ledgerCloseTime");
        expect(ledger).to.have.property("headerXdr");
        expect(ledger).to.have.property("metadataXdr");

        // Validate types
        expect(ledger.sequence).to.be.a("number");
        expect(ledger.hash).to.be.a("string");
        expect(ledger.ledgerCloseTime).to.be.a("string");
        expect(ledger.headerXdr).to.be.instanceOf(xdr.LedgerHeaderHistoryEntry);
        expect(ledger.metadataXdr).to.be.instanceOf(xdr.LedgerCloseMeta);

        done();
      })
      .catch(function (err) {
        done(err);
      });
  });

  it("throws error when ledger is missing required XDR fields", async function () {
    const invalidLedgerResults = [
      {
        // Missing both metadataXdr and headerXdr
        ledgers: [
          {
            hash: "acf84ff3de44330bb1b04de163ff5a481ca2196c91dca2702c0699e2d2d421c2",
            sequence: 848581,
            ledgerCloseTime: "1759439852",
            // metadataXdr: missing
            // headerXdr: missing
          },
        ],
        latestLedger: 848592,
        latestLedgerCloseTime: 1759439907,
        oldestLedger: 727633,
        oldestLedgerCloseTime: 1758834415,
        cursor: "848592",
      },
      {
        // Missing only metadataXdr
        ledgers: [
          {
            hash: "acf84ff3de44330bb1b04de163ff5a481ca2196c91dca2702c0699e2d2d421c2",
            sequence: 848581,
            ledgerCloseTime: "1759439852",
            // metadataXdr: missing
            headerXdr:
              "rPhP895EMwuxsE3hY/9aSByiGWyR3KJwLAaZ4tLUIcIAAAAX/VImpJvDxgAgKrIAJKUQx9X4NMswxtpAOSI7z9yUDcn7W3zPbRRU213oAgtjF4w4Gr9ocuVNkgjjyY8NZHVpUgAAAABo3uvsAAAAAAAAAAEAAAAAqCTNGLyddQZNKZpbW6ykO8OqLzJpOBU9jC+btctt8DMAAABAqYk3rl8NH4CFB8ekkDKdJDHjabXPOJUdc299R67Ls6k1xZSWQv7VslnYUnIbYZe3RhYdplwiS74GwEEHvWaWBhI45lbgpWLIVu5eL1gB0fBOT/OWjDzDTztQSw+ljSJ2R2PAttydrVzUhKfzOCDQjQlld+to/qZmh801SbpeKRoADPLFDeC2s6dkAAAAAAAuTtDbeQAAAAAAAAAAAAASJQAAAGQATEtAAAAAyBNDjM6eWlyP/jZeKneqYslsYyLLU2T4yrwfmkooKH9VK197igPthTrxQ9h100HkmyoFyDczhbv9yTGfxHZT7r2xByQFi58b6jub4t+rrmsIrf9qLrrstG70CnQh3uEdK3jfX/XfBYxAEzDm6pGn2/xshRwOT3D56ojadgOLJjaYAAAAAAAAAAA=",
          },
        ],
        latestLedger: 848592,
        latestLedgerCloseTime: 1759439907,
        oldestLedger: 727633,
        oldestLedgerCloseTime: 1758834415,
        cursor: "848592",
      },
      {
        // Missing only headerXdr
        ledgers: [
          {
            hash: "acf84ff3de44330bb1b04de163ff5a481ca2196c91dca2702c0699e2d2d421c2",
            sequence: 848581,
            ledgerCloseTime: "1759439852",
            metadataXdr:
              "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",
            // headerXdr: missing
          },
        ],
        latestLedger: 848592,
        latestLedgerCloseTime: 1759439907,
        oldestLedger: 727633,
        oldestLedgerCloseTime: 1758834415,
        cursor: "848592",
      },
    ];

    const expectedErrors = [
      "invalid ledger missing fields: metadataXdr and headerXdr",
      "invalid ledger missing fields: metadataXdr",
      "invalid ledger missing fields: headerXdr",
    ];

    const promises = invalidLedgerResults.map(async (invalidResult, index) => {
      const params = { startLedger: 848581 };
      mockGetLedgers(this.axiosMock, params, invalidResult);

      await expect(
        this.server.getLedgers({ startLedger: 848581 }),
      ).to.be.rejectedWith(TypeError, expectedErrors[index]);
    });

    await Promise.all(promises);
  });
});
